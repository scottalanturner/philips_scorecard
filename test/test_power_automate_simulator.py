import sys
import argparse
import os
import json
import base64

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from philips_scorecard.build_scorecard import *

from philips_scorecard.utils.doc_converters import word_to_base64
from philips_scorecard.config.config_loader import ConfigLoader
from philips_scorecard.database.azure_client import AzureClientMSSQL

def test_db_con():
    try:
        # Load configuration
        config_loader = ConfigLoader()
        db_config = config_loader.load_database_config()
        
        # Initialize Azure client
        azure_client = AzureClientMSSQL(server=db_config.server, 
                                        database=db_config.database, 
                                        username=db_config.username,
                                        password=db_config.password)
        
        # Load data
        df = azure_client.load_table_to_dataframe("philips_rules")
        
    except Exception as e:
        print(f"Error: {str(e)}")
        raise


def test_convert_response():
    # Test/Run the function from a browser and copy the HTTP response content from the output here.
    json_response ="{\"new_document_content\": \"\"}"

    # Parse the JSON response
    response_data = json.loads(json_response)
    
    # Extract the 'content' field which is base64 encoded
    document_content_modified_base64 = response_data['new_document_content']

    # Decode the base64 content to get the binary data
    document_content_modified = base64.b64decode(document_content_modified_base64)

    # Save the modified document to a new file. This is done locally for testing to verify the .docx is correct
    with open("io/updated_result.docx", "wb") as new_file:
        new_file.write(document_content_modified)
    print("Document saved to updated_result.docx")

def create_test_input():
    # Create a JSON object to simulate the input to the Azure. This file is relative to running the code in
    # philips_scorecard and executing: python test/power_automate_simulator.py
    input_template_name = 'io/philips_scorecard_template.docx'
    # Load the Word document template and convert to base64, just for testing.
    document_content_base64 = word_to_base64(input_template_name)   

    # Create the JSON object
    json_data = {
        "document_content": document_content_base64,
        "form_row_id": 24
    }     
    # Convert the JSON object to a JSON string
    json_string = json.dumps(json_data, indent=4)

    print(json_string)

def test_build_doc():

    # Get the directory of the current script
    current_dir = os.path.dirname(os.path.abspath(__file__))

    # Build the full path to the file
    input_template_name = 'philips_scorecard/io/philips_scorecard_template.docx'
    ouput_template_name = 'philips_scorecard/io/updated_result.docx'

    # Create a JSON object to simulate the input to the Azure. This file is relative to running the code in
    # philips_scorecard and executing: python test/power_automate_simulator.py
    #input_template_name = 'io/philips_scorecard_template.docx'
    # Load the Word document template and convert to base64, just for testing.
    document_content_base64 = word_to_base64(input_template_name)   

    # Create the JSON object
    json_data = {
        "document_content": document_content_base64,
        "form_row_id": 24
    }     
    # Convert the JSON object to a JSON string
    json_request = json.dumps(json_data, indent=4)

    # Calling azure which sends back a json response, base64 encoded document
    json_response = build_scorecard(json_request)

    # Parse the JSON response
    response_data = json.loads(json_response)

    # Extract the 'content' field which is base64 encoded
    document_content_modified_base64 = response_data['new_document_content']

    # Decode the base64 content to get the binary data
    document_content_modified = base64.b64decode(document_content_modified_base64)

    # Save the modified document to a new file. This is done locally for testing to verify the .docx is correct
    with open(ouput_template_name, "wb") as new_file:
        new_file.write(document_content_modified)
    print("Document saved to updated_result.docx")



if __name__ == "__main__":
#    test_db_con()
    parser = argparse.ArgumentParser(description="Power Automate Simulator")
    parser.add_argument("action", choices=["db_test", "create_input", "process_output", "build_doc"], help="Action to perform")
    args = parser.parse_args()

    if args.action == "db_test":
        test_db_con()
    elif args.action == "create_input":
        create_test_input()
    elif args.action == "process_output":
        test_convert_response()
    elif args.action == "build_doc":
        test_build_doc()


    # Calling azure which sends back a json response, base64 encoded document
    #response = call_azure_function(json=json_string)

    # Parse the JSON response
    #response_data = json.loads(response)

    # Extract the 'content' field which is base64 encoded
    #document_content_modified_base64 = response_data['new_document_content']

    # Decode the base64 content to get the binary data
    #document_content_modified = base64.b64decode(document_content_modified_base64)

    # Save the modified document to a new file. This is done locally for testing to verify the .docx is correct
    #with open("io/updated_result.docx", "wb") as new_file:
    #    new_file.write(document_content_modified)
    #print("Document saved to updated_result.docx")